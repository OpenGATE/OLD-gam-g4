/* --------------------------------------------------
   Copyright (C): OpenGATE Collaboration
   This software is distributed under the terms
   of the GNU Lesser General  Public Licence (LGPL)
   See LICENSE.md for further details
   -------------------------------------------------- */

#include "GamTHitAttribute.h"
#include "GamTBranch.h"
#include "GamHitsCollectionsRootManager.h"
#include "G4RunManager.hh"

template<class T>
GamTHitAttribute<T>::GamTHitAttribute(std::string vname) : GamVHitAttribute(vname, 'D') {
    DDD(typeid(T).name());
    Fatal("GamTHitAttribute constructor must be specialized for this type");
}

template<class T>
GamTHitAttribute<T>::~GamTHitAttribute() {
}

template<class T>
void GamTHitAttribute<T>::FillDValue(double value) {
    auto ram = G4RootAnalysisManager::Instance();
    ram->FillNtupleDColumn(fTupleId, fHitAttributeId, value);
}

template<class T>
void GamTHitAttribute<T>::FillSValue(std::string value) {
    auto ram = G4RootAnalysisManager::Instance();
    ram->FillNtupleSColumn(fTupleId, fHitAttributeId, value);
}

template<class T>
void GamTHitAttribute<T>::FillIValue(int value) {
    auto ram = G4RootAnalysisManager::Instance();
    ram->FillNtupleIColumn(fTupleId, fHitAttributeId, value);
}

template<class T>
void GamTHitAttribute<T>::Fill3Value(G4ThreeVector value) {
    auto ram = G4RootAnalysisManager::Instance();
    ram->FillNtupleDColumn(fTupleId, fHitAttributeId, value[0]);
    ram->FillNtupleDColumn(fTupleId, fHitAttributeId + 1, value[1]);
    ram->FillNtupleDColumn(fTupleId, fHitAttributeId + 2, value[2]);
}
